"""
CP1401 2023-1 Assignment 2
Animal Accumulator
Student Name: JiaxinLi
Date started: 17/01/2024
Pseudocode:

start program

display "Welcome to the Animal Accumulator."
display "Animals cost and generate income according to their name length (e.g., a Zebra costs 5)."
display "Each day, animals generate income based on luck. Sometimes they escape."
display "You can buy new animals with the income your animals generates."

class AnimalAccumulator:
    function initialize
        set animals to initial list ["Antelope", "Fox", "Zebra"]
        set total_income to 0
        set days_simulated to 0
        initialize income_records as empty dictionary
        set lucky_number to 0

    function welcome_message
        display "Welcome to the Animal Accumulator."

    function start
        call welcome_message
        Ask user if they want to load animals from file
        If yes, call load_animals_from_file
        Otherwise, display current animals

        Loop infinitely:
                display simulation status
                display menu
                get user choice
                if choice is "w", call wait
                if choice is "d", call display_animals
                if choice is "a", call add_new_animal
                if choice is "q", call quit_program and break loop
                otherwise, print invalid choice

    function generate_lucky_number
        generate a random lucky number between 1 and 100
        display "Today's lucky number is", self.lucky_number

    function accumulate_income
        Initialize daily_income_records and escaped_animals
        for each animal in initial list
            luck = random.randint(1, 100)
            if luck <= self.lucky_number
                income_generated = len(animal)
                daily_income_records[animal] = daily_income_records.get(animal, 0) + income_generated
                self.income_records[animal] = self.income_records.get(animal, 0) + income_generated
                self.total_income += income_generated
            else
                display "Sadly,your",animal,"has escaped!"
                escaped_animals.append(animal)

        for animal in escaped_animals
            self.animals.remove(animal)
        for animal, income in daily_income_records.items()
            display "A pet for {animal} earned {income},"

    function wait
        call generate_lucky_number
        call accumulate_income

    function display_animals
    display list of current animals or a message if no animals
        if self.animals
            for animal in self.animals
                display "animal"
        else
            display "No animals."

    function add_new_animal
    let user input a new animal name
    check for validity and uniqueness of the animal name
    check if user can afford the animal
    add animal to list and deduct cost from total income
        while True
            animal = input("Animal name: ").strip().title()
            if animal == ""
                display "Invalid value."
                continue
            elif not animal.isalpha()
                display "Invalid animal name."
                continue
            elif animal in self.animals
                display "You already have {animal}"
                continue

            cost = len(animal)
            if cost > self.total_income
                display "You can't afford {animal}"
                return

            self.animals.append(animal)
            display "Added {animal}."
            self.total_income -= cost
            break

    function get_valid_animal
        while True
            animal = input("Animal name: ").strip().title()
            if not animal.isalpha()
                display "Invalid animal name."
                return

    function quit_program
        display summary
        Ask user to save animals to file
        if save_choice == 'y'
            self.save_animals_to_file()
            display "Animals saved to animals.txt."
        else
            display "Animals not saved."
        display "Thank you for playing the Animal Accumulator :)"

    function save_animals_to_file
    save animal names to "animals.txt" file
        with open("animals.txt", "w") as file
            for animal in sorted(self.animals)
                file.write(animal + "\n")

    function display_animal_incomes
    display income generated by each animal
        if self.income_records
            display "Income generated by each animal:"
            for animal, income in self.income_records.items()
                display "{animal} earned {income}."
        else
            display "No income records available."

    function handle_quit
        display menu
        choice = input("Choose: ").lower()
        if choice == "q"
            display "You finished with these animals:"
            self.display_animals()
        else
            display "Invalid choice."
            if self.animals
                display ", ".join(self.animals)
            else
                display "No animals"

    function load_animals_from_file
    load animals from "animals.txt" file, handle file not found exception
        try
            with open("animals.txt", "r") as file
                loaded_animals = [line.strip() for line in file]
                self.animals.extend(animal for animal in loaded_animals if animal not in self.animals)
            display "Loaded."
            display "You start with these animals:"
            self.display_animals()
        except FileNotFoundError
            display "No animals.txt file found. Starting with no animals."

    function display_simulation_status
        increase days_simulated by 1
        display current simulation status

    function display_menu
        display available options "(W)ait\n(D)isplay animals\n(A)dd new animal\n(Q)uit"

    function display_summary
        display total income after current days "After {self.days_simulated} days, your total income is {self.total_income}."

    function quit_program
        display summary
        save_choice = input("Would you like to save your animals to animals.txt (Y/n)? ").strip().lower()
        if save_choice == 'y'
            self.save_animals_to_file()
            display "OK, let's save this thing."
            display "Saved."
        else
            display"Animals not saved."
        display "Thank you for playing the Animal Accumulator :)"

    function save_animals_to_file
        with open("animals.txt", "w") as file
            for animal in sorted(self.animals)
                file.write(animal + "\n")

Instantiate AnimalAccumulator
Start AnimalAccumulator

end program
"""
import random
print("Welcome to the Animal Accumulator.")
print("Animals cost and generate income according to their name length (e.g., a Zebra costs 5).")
print("Each day, animals generate income based on luck. Sometimes they escape.")
print("You can buy new animals with the income your animals generates.")

class AnimalAccumulator:
    def __init__(self):
        self.animals = ["Antelope", "Fox", "Zebra"]
        self.total_income = 0
        self.days_simulated = 0
        self.income_records = {}
        self.lucky_number = 0

    def welcome_message(self):
        print("Welcome to the Animal Accumulator.")

    def start(self):
        self.welcome_message()
        load_choice = input("Would you like to load your animals from animals.txt (Y/n)? ")
        if load_choice.lower() == "y":
            self.load_animals_from_file()
        else:
            print("You start with these animals:")
            self.display_animals()

        while True:
            self.display_simulation_status()
            self.display_menu()
            choice = input("Choose: ").lower()

            if choice == "w":
                self.wait()
            elif choice == "d":
                self.display_animals()
            elif choice == "a":
                self.add_new_animal()
            elif choice == "q":
                print("You finished with these animals:")
                self.display_animals()
                self.quit_program()
                break
            else:
                print("Invalid choice.")

    def generate_lucky_number(self):
        self.lucky_number = random.randint(1, 100)
        print("Today's lucky number is", self.lucky_number)

    def accumulate_income(self):
        daily_income_records = {}
        escaped_animals = []
        for animal in self.animals:
            luck = random.randint(1, 100)
            if luck <= self.lucky_number:
                income_generated = len(animal)
                daily_income_records[animal] = daily_income_records.get(animal, 0) + income_generated
                self.income_records[animal] = self.income_records.get(animal, 0) + income_generated
                self.total_income += income_generated
            else:
                print("Sadly,your",animal,"has escaped!")
                escaped_animals.append(animal)

        for animal in escaped_animals:
            self.animals.remove(animal)
        for animal, income in daily_income_records.items():
            print(f"A pet for {animal} earned {income},")

    def wait(self):
        self.generate_lucky_number()
        self.accumulate_income()

    def display_animals(self):
        if self.animals:
            for animal in self.animals:
                print(animal)
        else:
            print("No animals.")

    def add_new_animal(self):
        while True:
            animal = input("Animal name: ").strip().title()
            if animal == "":
                print("Invalid value.")
                continue
            elif not animal.isalpha():
                print("Invalid animal name.")
                continue
            elif animal in self.animals:
                print(f"You already have {animal}")
                continue

            cost = len(animal)
            if cost > self.total_income:
                print(f"You can't afford {animal}")
                return

            self.animals.append(animal)
            print(f"Added {animal}.")
            self.total_income -= cost
            break

    def get_valid_animal(self):
        while True:
            animal = input("Animal name: ").strip().title()
            if not animal.isalpha():
                print("Invalid animal name.")
                return

    def quit_program(self):
        self.display_summary()
        save_choice = input("Would you like to save your animals to animals.txt (Y/n)? ").strip().lower()
        if save_choice == 'y':
            self.save_animals_to_file()
            print("Animals saved to animals.txt.")
        else:
            print("Animals not saved.")
        print("Thank you for playing the Animal Accumulator :)")

    def save_animals_to_file(self):
        with open("animals.txt", "w") as file:
            for animal in sorted(self.animals):
                file.write(animal + "\n")

    def display_animal_incomes(self):
        if self.income_records:
            print("Income generated by each animal:")
            for animal, income in self.income_records.items():
                print(f"{animal} earned {income}.")
        else:
            print("No income records available.")

    def handle_quit(self):
        self.display_menu()
        choice = input("Choose: ").lower()
        if choice == "q":
            print("You finished with these animals:")
            self.display_animals()
        else:
            print("Invalid choice.")
            if self.animals:
                print(", ".join(self.animals))
            else:
                print("No animals")

    def load_animals_from_file(self):
        try:
            with open("animals.txt", "r") as file:
                loaded_animals = [line.strip() for line in file]
                self.animals.extend(animal for animal in loaded_animals if animal not in self.animals)
            print("Loaded.")
            print("You start with these animals:")
            self.display_animals()
        except FileNotFoundError:
            print("No animals.txt file found. Starting with no animals.")

    def display_simulation_status(self):
        self.days_simulated += 1
        print(f"After {self.days_simulated} days, you have "
              f"{len(self.animals)} animals and your total income is "
              f"{self.total_income}.")

    def display_menu(self):
        print("(W)ait\n(D)isplay animals\n(A)dd new animal\n(Q)uit")

    def display_summary(self):
        print(f"After {self.days_simulated} days, your total income is {self.total_income}.")

    def quit_program(self):
        self.display_summary()
        save_choice = input("Would you like to save your animals to animals.txt (Y/n)? ").strip().lower()
        if save_choice == 'y':
            self.save_animals_to_file()
            print("OK, let's save this thing.")
            print("Saved.")
        else:
            print("Animals not saved.")
        print("Thank you for playing the Animal Accumulator :)")

    def save_animals_to_file(self):
        with open("animals.txt", "w") as file:
            for animal in sorted(self.animals):
                file.write(animal + "\n")

animal_accumulator = AnimalAccumulator()
animal_accumulator.start()

